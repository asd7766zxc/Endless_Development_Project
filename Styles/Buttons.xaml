<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Endless_Development_Project_Studio"
                    xmlns:my="clr-namespace:Endless_Development_Project_Studio.Controls">
    <my:AngleToPointConverter x:Key="prConverter" />
    <my:AngleToIsLargeConverter x:Key="isLargeConverter" />
    <my:RadiusToSizeConverter x:Key="sizeConverter" />
    <my:StrokeToStartPointConverter x:Key="spconverter" />
    <my:RadiusToCenterConverter x:Key="rtocConverter" />
    <my:RadiusToDiameter x:Key="radtodia" />
    <my:InnerRadiusConverter x:Key="innerRadConverter" />
    <my:StrokeLineCapConverter x:Key="lineCapConverter" />
    <Style x:Key="BaseStyle">
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="WindowControlButton" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundMainBrush}" />

        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" />
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource BackgroundTransparencyBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <Style TargetType="{x:Type Button}" x:Key="Hoverless">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type Button}" x:Key="WindowCloseButton" BasedOn="{StaticResource WindowControlButton}">

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Red" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
            </Trigger>
        </Style.Triggers>

    </Style>

        <SolidColorBrush x:Key="Button.MouseOver.Background3" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border3" Color="#FF3C7FB1"/>
        <Style x:Key="CompositionButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#15607D8B"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush x:Name="foreground" Color="#70E1F5FE" />
            </Setter.Value>
        </Setter>
       
        <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" Margin="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"  SnapsToDevicePixels="true" CornerRadius="{Binding ActualHeight,RelativeSource={RelativeSource  Mode=FindAncestor, AncestorType=Border}}">
                        <Border.Background>
                            <SolidColorBrush x:Name="background" Color="#20607D8B" />
                        </Border.Background>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
            Storyboard.TargetProperty="Color" Storyboard.TargetName="background" From="#20607D8B"
            To="#40607D8B" Duration="0:0:0.2">
                                       
                                    </ColorAnimation>
                                 
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
            Storyboard.TargetProperty="Color" Storyboard.TargetName="background" From="#40607D8B"
            To="#20607D8B" Duration="0:0:0.2">
                                        
                                    </ColorAnimation>
                                   
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                           
                           <!-- <Setter Property="Background" TargetName="border" Value="#40607D8B"/>-->
                            <Setter Property="Foreground" Value="#90E1F5FE"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border3}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#95607D8B"/>
                        </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
           
        <Style.Triggers>
            <EventTrigger RoutedEvent="Loaded" >
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
            Storyboard.TargetProperty="Opacity"  From="0"
            To="1" Duration="0:0:0.3">
                            
                        </DoubleAnimation>

                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
  
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ControlListbtn" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RegularButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#0000"/>
        <Setter Property="Foreground" Value="#fff"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#0DF5F5F5"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#AAFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="#AAF5F5F5"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#AAFFFF"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.MouseOver.Background2" Color="#AFf44336"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border2" Color="#0000"/>

    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Viewbox >
                                <Rectangle x:Name="CloseRect" Height="10" Width="10">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="#202225" />
                                </Rectangle.Fill>
                                <Rectangle.RenderTransform>
                                    <RotateTransform CenterX="5" CenterY="5" Angle="45" />
                                </Rectangle.RenderTransform>
                            </Rectangle>
                            </Viewbox>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Rectangle.Fill" TargetName="CloseRect" Value="{StaticResource Button.MouseOver.Background2}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border2}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Rectangle.Fill" TargetName="CloseRect" Value="#FFf44336"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CircularProgressBarStyle" TargetType="my:CircularProgressBar">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="my:CircularProgressBar">
                    <Grid
                        Width="{Binding Path=Radius, Converter={StaticResource radtodia},RelativeSource={RelativeSource AncestorType=ProgressBar}}"
                        Height="{Binding Path=Radius, Converter={StaticResource radtodia}, RelativeSource={RelativeSource AncestorType=ProgressBar}}">

                        <Path Stroke="{TemplateBinding Stroke}" 
                              StrokeThickness="{TemplateBinding StrokeThickness}" 
                              Fill="{TemplateBinding Fill}">
                            <Path.Data>
                                <EllipseGeometry
                                    Center="{Binding Path=Radius,Converter={StaticResource rtocConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=ProgressBar}}">
                                    <EllipseGeometry.RadiusX>
                                        <MultiBinding Converter="{StaticResource innerRadConverter}">
                                            <Binding Path="Radius"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                            <Binding Path="Thickness"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                            <Binding Path="StrokeMode"
                                                     RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}" />
                                        </MultiBinding>
                                    </EllipseGeometry.RadiusX>
                                    <EllipseGeometry.RadiusY>
                                        <Binding Path="RadiusX" RelativeSource="{RelativeSource Self}" />
                                    </EllipseGeometry.RadiusY>
                                </EllipseGeometry>
                            </Path.Data>
                        </Path>

                        <Path Stroke="{TemplateBinding Background}"
                              StrokeThickness="{TemplateBinding Thickness}">
                            <Path.StrokeStartLineCap>
                                <MultiBinding Converter="{StaticResource lineCapConverter}">
                                    <Binding Path="Value"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                    <Binding Path="StartLineCap"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                </MultiBinding>
                            </Path.StrokeStartLineCap>
                            <Path.StrokeEndLineCap>
                                <MultiBinding Converter="{StaticResource lineCapConverter}">
                                    <Binding Path="Value"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                    <Binding Path="EndLineCap"
                                             RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ProgressBar}"/>
                                </MultiBinding>
                            </Path.StrokeEndLineCap>
                            <Path.Data>
                                <PathGeometry>
                                    <PathFigure>
                                        <PathFigure.StartPoint>
                                            <MultiBinding Converter="{StaticResource spconverter}">
                                                <Binding Path="Radius"
                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                <Binding Path="Thickness"
                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                            </MultiBinding>
                                        </PathFigure.StartPoint>

                                        <ArcSegment x:Name="arcSegment"
                                            RotationAngle="0" SweepDirection="Clockwise"
                                                    IsLargeArc="{Binding Path=Angle, Converter={StaticResource isLargeConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType=ProgressBar}}"
                                                    >
                                            <ArcSegment.Point>
                                                <MultiBinding Converter="{StaticResource prConverter}">
                                                    <Binding Path="Angle"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Radius"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Thickness"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                </MultiBinding>
                                            </ArcSegment.Point>
                                            <ArcSegment.Size>
                                                <MultiBinding Converter="{StaticResource sizeConverter}">
                                                    <Binding Path="Radius"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                    <Binding Path="Thickness"
                                                             RelativeSource="{RelativeSource FindAncestor, AncestorType=ProgressBar}" />
                                                </MultiBinding>
                                            </ArcSegment.Size>
                                        </ArcSegment>
                                    </PathFigure>
                                </PathGeometry>
                            </Path.Data>
                        </Path>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>